[1,["ecpdLyjvZBwrvm+cedCcQy","a27BpPi9tF2pSiXuoIhuu3","83e8pzeyBEyJYDdwCv1MeR","da32qRlGVJ2ogqQoWFenHq","8bM2xzKMZH1a00dy8ssdOV","e344U/7OJAR6oxydYGnDCK"],["node","_spriteFrame","root","data","_defaultClip","_effectAsset"],[["cc.Node",["_name","_active","_components","_prefab","_contentSize","_parent","_children","_trs","_color"],1,9,4,5,1,2,7,5],["cc.Sprite",["_type","_sizeMode","node","_materials","_spriteFrame"],1,1,3,6],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.Prefab",["_name"],2],["e5418/snvxI1Yq/KItkwaQF",["node"],3,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.Label",["_string","_fontSize","_lineHeight","_styleFlags","_N$horizontalAlign","_N$verticalAlign","node","_materials"],-3,1,3],["cc.Material",["_name","_techniqueData"],1],["cc.AnimationClip",["_name","_duration","speed","wrapMode","curveData"],-1,11],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[2,0,1,2,2],[0,0,5,2,3,4,2],[3,0,2],[0,0,6,2,3,4,2],[0,0,1,5,6,2,3,4,7,3],[0,0,5,2,3,8,4,7,2],[4,0,1],[2,1,2,1],[1,0,1,2,3,4,3],[1,2,3,4,1],[1,2,3,1],[5,0,1,2,3,2],[6,0,1,2,3,4,5,6,7,7],[7,0,1,3],[8,0,1,2,3,4,5],[9,0,1,2,4]],[[[[2,"BossDropItem"],[3,"BossDropItem",[-3,-4,-5],[[6,-2]],[7,-1,0],[5,150,150]],[4,"new",false,1,[-8],[[8,1,0,-6,[4],5],[11,true,-7,[7],6]],[0,"a5ehfrZHpLDL0c7RN8mtJ2",1,0],[5,50,29],[32.783,52.108,0,0,0,0,1,1,1,1]],[1,"bg",1,[[9,-9,[0],1]],[0,"d2+7UPP6lK+opHi2OLtwUx",1,0],[5,109,109]],[1,"logo",1,[[10,-10,[2]]],[0,"54boIfhCVOC7f+tMYgOSwo",1,0],[5,99,101]],[5,"New Label",2,[[12,"new",23,23,1,1,1,-11,[3]]],[0,"b8fU92X9dIw6d82VzH4mxz",1,0],[4,4279571868],[5,44.73,28.98],[0,2.989,0,0,0,0,1,1,1,1]]],0,[0,2,1,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,0,2,0,0,2,0,-1,5,0,0,3,0,0,4,0,0,5,0,3,1,11],[0,0,0,0,0,0,0,0],[-1,1,-1,-1,-1,1,4,-1],[2,3,0,0,0,4,1,1]],[[[13,"Show",{"0":{"props":{"time":1},"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[5],[5]],[[[14,"isNew",0.6666666666666666,0.8,2,[{},"props",11,[{"angle":[{"frame":0,"value":0},{"frame":0.16666666666666666,"value":10},{"frame":0.3333333333333333,"value":0},{"frame":0.5,"value":-10},{"frame":0.6666666666666666,"value":0}]},"scale",12,[[[{"frame":0},"value",8,[1,1,1,1]],[{"frame":0.16666666666666666},"value",8,[1,1.05,1.05,1]],[{"frame":0.3333333333333333},"value",8,[1,1.1,1.1,1]],[{"frame":0.5},"value",8,[1,1.05,1.05,1]],[{"frame":0.6666666666666666},"value",8,[1,1,1,1]]],11,11,11,11,11]]]]],0,0,[],[],[]],[[[15,"Show",[{"hash":2222301968,"record":null,"name":"Show|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform myUniform{\n  float howWhite;\n  float power;\n  float time;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float mix_num =1.0;\n  float powerTime =time*power;\n  float show = abs(sin(powerTime))*howWhite+mix_num;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor=  vec4(o.r*show,o.g*show,o.b*show,o.a*show);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float howWhite;\nuniform float power;\nuniform float time;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float mix_num =1.0;\n  float powerTime =time*power;\n  float show = abs(sin(powerTime))*howWhite+mix_num;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor=  vec4(o.r*show,o.g*show,o.b*show,o.a*show);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"myUniform","binding":1,"members":[{"name":"howWhite","type":13,"count":1},{"name":"power","type":13,"count":1},{"name":"time","type":13,"count":1}],"defines":["USE_TEXTURE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Show|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"howWhite":{"type":13,"value":[5]},"power":{"type":13,"value":[10]},"time":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]]]]